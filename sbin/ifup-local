#!/bin/bash
if [ `id -u` != 0 ]
then
    echo $0: must run as root
    exit 1
fi

#
# FIXME: only run this if network IP is configured
# FIXME: run firewall rules update
#

log_info() {
	msg="$*"
	echo "$0: `date`: INFO: $* ====================" >> /var/log/setup_mlx_v3.log 2>&1
	sudo logger --id $$ -p user.info -- "$0: INFO: $*"
}
log_error() {
	msg="$*"
	echo "$0: `date`: ERROR: $* ====================" >> /var/log/setup_mlx_v3.log 2>&1
	sudo logger --id $$ -p user.error -- "$0: ERROR: $*"
}
#
# The mapping <interface_name, mlx_name, port_number can change, so need to compute dynamically,
# although main MPI code relies on this triple <mlx5_0, 1, enp94s0f0>. If this changes, we will
# to update the main MPI configuration scripts.
# 
#
# Oracle RDMA
# ==================================
# mlx5_0 port 1 ==> enp94s0f0 (Up)
# mlx5_0 port 2 ==> enp94s0f1 (Down)
#
# OFED-4.3
# ==================================
# mlx5_0 port 1 ==> enp94s0f0 (Up)
# mlx5_1 port 1 ==> enp94s0f1 (Down)
#
INTF_NAME="$1"
echo $0: /sbin/ifup-local $INTF_NAME: `date` ==================== >> /var/log/setup_mlx_v3.log 2>&1
case "$1" in
"enp94s0f0")
	MLX_NAME=`ibdev2netdev | grep $INTF_NAME | awk '{ print $1; }'`
	PORT=`ibdev2netdev | grep $INTF_NAME | awk '{ print $3; }'`
	if [ "$MLX_NAME" == "" ]
	then
		log_error "cannot find MLX_NAME for INTF_NAME=$INTF_NAME"
		exit 0
	fi
	if [ "$PORT" == "" ]
	then
		log_error "cannot find PORT for INTF_NAME=$INTF_NAME"
		exit 0
	fi
	log_info "found INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT"
	;;
"enp94s0f1")
	# this port is not supported
	log_info "ignoring unsupported interface INTF_NAME=$INTF_NAME"
	exit 0
	# MLX_NAME=`ibdev2netdev | grep $INTF_NAME | awk '{ print $1; }'`
	# PORT=`ibdev2netdev | grep $INTF_NAME | awk '{ print $3; }'`
	# echo $0: found INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT: `date` ==================== >> /var/log/setup_mlx_v3.log 2>&1
	;;
*)
	exit 0
	;;
esac

log_info "INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT: checking and updating firmware defaults"
/opt/oci-hpc/sbin/mlnx_fw_ctl.sh check_update_defaults >> /var/log/setup_mlx_v3.log 2>&1
__status=$?
if [ $__status -eq 0 ]
then
	log_info "INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT: done checking firmware and updating defaults, status ok"
else
	log_error "INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT: failed checking and updating firmware defaults, status $__status"
fi

IP_HPC=`/usr/sbin/ifconfig $INTF_NAME | grep "inet " | awk '{ print $2; }'`
if [ "$IP_HPC" == "" ]
then
	log_info "INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT: interface does not have an IP address assigned, no more work to do"
	exit 0
fi

log_info "INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT: fixing up iptables...."
/opt/oci-hpc/sbin/fixup_iptables.sh  >> /var/log/setup_mlx_v3.log 2>&1
log_info "INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT: done fixing up iptables...."

#
# restart wpa_supplicant service - if the service starts before the interface comes up, it will fail and not retry.
# /opt/oci-hpc/sbin/update_wpa_certs.py now restarts the service
#
# systemctl restart wpa_supplicant
#

log_info "INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT: updating wpa certs"
/opt/oci-hpc/sbin/update_wpa_certs.py nodelay  >> /var/log/setup_mlx_v3.log 2>&1
__status=$?
if [ $__status -eq 0 ]
then
	log_info "INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT: done updating wpa certs, status ok"
else
	log_error "INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT: failed updating wpa certs, status $__status"
fi

log_info "/opt/oci-hpc/sbin/setup_mlx_v3.sh INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT"
/opt/oci-hpc/sbin/setup_mlx_v3.sh $INTF_NAME $MLX_NAME $PORT >> /var/log/setup_mlx_v3.log 2>&1
__status=$?
if [ $__status -eq 0 ]
then
	log_info "/opt/oci-hpc/sbin/setup_mlx_v3.sh INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT: status ok"
else
	log_error "/opt/oci-hpc/sbin/setup_mlx_v3.sh INTF_NAME=$INTF_NAME, MLX_NAME=$MLX_NAME, PORT=$PORT: status $__status"
fi
exit $status
